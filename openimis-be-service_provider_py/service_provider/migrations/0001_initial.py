# Generated by Django 3.0.14 on 2022-03-08 15:01

import core.fields
import core.models
import datetime
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0015_missing_roles'),
        ('location', '0006_users_api'),
    ]

    operations = [
        migrations.CreateModel(
            name='Paypoint',
            fields=[
                ('validity_from', core.fields.DateTimeField(db_column='ValidityFrom', default=datetime.datetime.now)),
                ('validity_to', core.fields.DateTimeField(blank=True, db_column='ValidityTo', null=True)),
                ('legacy_id', models.IntegerField(blank=True, db_column='LegacyID', null=True)),
                ('id', models.AutoField(db_column='PSPId', primary_key=True, serialize=False)),
                ('uuid', models.CharField(db_column='PSPUUID', default=uuid.uuid4, max_length=36, unique=True)),
                ('paypointName', models.CharField(db_column='PSPName', max_length=255)),
                ('paypointCode', models.CharField(db_column='PSPCode', max_length=255)),
                ('geolocation', models.CharField(db_column='PSPGeolocation', max_length=255)),
                ('location', models.ForeignKey(blank=True, db_column='PSPLocationId', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='location.Location')),
            ],
            options={
                'db_table': 'tblPaypoints',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ServiceProvider',
            fields=[
                ('validity_from', core.fields.DateTimeField(db_column='ValidityFrom', default=datetime.datetime.now)),
                ('validity_to', core.fields.DateTimeField(blank=True, db_column='ValidityTo', null=True)),
                ('legacy_id', models.IntegerField(blank=True, db_column='LegacyID', null=True)),
                ('id', models.AutoField(db_column='ServiceProviderID', primary_key=True, serialize=False)),
                ('uuid', models.CharField(db_column='SPUUID', default=uuid.uuid4, max_length=36, unique=True)),
                ('code', models.CharField(db_column='Code', max_length=255)),
                ('name', models.CharField(db_column='sevciceProviderName', max_length=255)),
                ('address', models.CharField(db_column='Address', max_length=255)),
                ('phoneNumber', models.CharField(db_column='PhoneNumber', max_length=255)),
                ('fax', models.CharField(db_column='Fax', max_length=255)),
                ('email', models.CharField(db_column='Email', max_length=255)),
                ('accountCode', models.CharField(db_column='Account_code', max_length=255)),
            ],
            options={
                'db_table': 'tblServiceProviders',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ServiceProviderLegalForm',
            fields=[
                ('validity_from', core.fields.DateTimeField(db_column='ValidityFrom', default=datetime.datetime.now)),
                ('validity_to', core.fields.DateTimeField(blank=True, db_column='ValidityTo', null=True)),
                ('legacy_id', models.IntegerField(blank=True, db_column='LegacyID', null=True)),
                ('code', models.CharField(db_column='LegalFormCode', max_length=1, primary_key=True, serialize=False)),
                ('legal_form', models.CharField(db_column='LegalForms', max_length=50)),
                ('sort_order', models.IntegerField(blank=True, db_column='SortOrder', null=True)),
            ],
            options={
                'db_table': 'tblSPLegalForms',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ServiceProviderLevel',
            fields=[
                ('validity_from', core.fields.DateTimeField(db_column='ValidityFrom', default=datetime.datetime.now)),
                ('validity_to', core.fields.DateTimeField(blank=True, db_column='ValidityTo', null=True)),
                ('legacy_id', models.IntegerField(blank=True, db_column='LegacyID', null=True)),
                ('code', models.CharField(db_column='LevelCode', max_length=1, primary_key=True, serialize=False)),
                ('level', models.CharField(db_column='Level', max_length=50)),
                ('sort_order', models.IntegerField(blank=True, db_column='SortOrder', null=True)),
            ],
            options={
                'db_table': 'tblSPLevels',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ServiceProviderSubLevel',
            fields=[
                ('validity_from', core.fields.DateTimeField(db_column='ValidityFrom', default=datetime.datetime.now)),
                ('validity_to', core.fields.DateTimeField(blank=True, db_column='ValidityTo', null=True)),
                ('legacy_id', models.IntegerField(blank=True, db_column='LegacyID', null=True)),
                ('code', models.CharField(db_column='SubLevelCode', max_length=1, primary_key=True, serialize=False)),
                ('sub_level', models.CharField(db_column='SubLevel', max_length=50)),
                ('sort_order', models.IntegerField(blank=True, db_column='SortOrder', null=True)),
            ],
            options={
                'db_table': 'tblSPSubLevels',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ServiceProviderSubLevelMutation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('mutation', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='sub_level', to='core.MutationLog')),
                ('sub_level', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='mutations', to='service_provider.ServiceProviderSubLevel')),
            ],
            options={
                'db_table': 'serviceprovider_ServiceProviderSubLevelMutation',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ServiceProviderMutation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('mutation', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='service_provider', to='core.MutationLog')),
                ('service_provider', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='mutations', to='service_provider.ServiceProvider')),
            ],
            options={
                'db_table': 'serviceprovider_ServiceProviderMutations',
                'managed': True,
            },
            bases=(models.Model, core.models.ObjectMutation),
        ),
        migrations.CreateModel(
            name='ServiceProviderLevelMutation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('level', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='mutations', to='service_provider.ServiceProviderLevel')),
                ('mutation', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='level', to='core.MutationLog')),
            ],
            options={
                'db_table': 'serviceprovider_ServiceProviderLevelMutation',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ServiceProviderLegalFormMutation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('legal_form', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='mutations', to='service_provider.ServiceProviderLegalForm')),
                ('mutation', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='legal_form', to='core.MutationLog')),
            ],
            options={
                'db_table': 'serviceprovider_ServiceProviderLegalFormMutation',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='serviceprovider',
            name='legalForm',
            field=models.ForeignKey(db_column='SPLegalForm', on_delete=django.db.models.deletion.DO_NOTHING, related_name='serviceprovider_legalform', to='service_provider.ServiceProviderLegalForm'),
        ),
        migrations.AddField(
            model_name='serviceprovider',
            name='level',
            field=models.ForeignKey(db_column='SPLevel', on_delete=django.db.models.deletion.DO_NOTHING, related_name='serviceprovider_level', to='service_provider.ServiceProviderLevel'),
        ),
        migrations.AddField(
            model_name='serviceprovider',
            name='subLevel',
            field=models.ForeignKey(db_column='SPSubLevel', on_delete=django.db.models.deletion.DO_NOTHING, related_name='serviceprovider_sublevel', to='service_provider.ServiceProviderSubLevel'),
        ),
        migrations.CreateModel(
            name='PaypointMutation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('mutation', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='pay_point', to='core.MutationLog')),
                ('pay_point', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='mutations', to='service_provider.Paypoint')),
            ],
            options={
                'db_table': 'Paypoint_Mutations',
                'managed': True,
            },
            bases=(models.Model, core.models.ObjectMutation),
        ),
        migrations.AddField(
            model_name='paypoint',
            name='serviceProvider',
            field=models.ForeignKey(blank=True, db_column='ServiceProvider', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='service_provider.ServiceProvider'),
        ),
    ]
